{
	"New OpenGL Window": {
		"prefix": "gwindow",
		"body": [
            "#include <iostream>",
            "// GLAD的头文件包含了正确的OpenGL头文件（例如GL/gl.h），所以需要在其它依赖于OpenGL的头文件之前包含GLAD。",
            "#include <glad/glad.h>",
            "#include <GLFW/glfw3.h>",
            "",
            "#include <stb_image.h>",
            "",
            "#include <glm/glm.hpp>",
            "#include <glm/gtc/matrix_transform.hpp>",
            "#include <glm/gtc/type_ptr.hpp>",
            "",
            "#include <learnopengl/shader.h>",
            "#include <learnopengl/camera.h>",
            "",
            "namespace ${1:Ch01} {",
            "\tnamespace ${2:Test} {",
            "\t\tconst unsigned int SCR_WIDTH = 800;",
            "\t\tconst unsigned int SCR_HEIGHT = 600;",
            "\t\t",
            "\t\tvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);",
            "\t\tvoid mouse_callback(GLFWwindow* window, double xpos, double ypos);",
            "\t\tvoid scroll_callback(GLFWwindow* window, double xoffset, double yoffset);",
            "\t\tvoid processInput(GLFWwindow *window);",
            "\t\tunsigned int loadTexture(char const * path);",
            "\t\t",
            "\t\tCamera camera(glm::vec3(0.0f, 0.0f, 3.0f));",
            "\t\tfloat lastX = SCR_WIDTH / 2.0f;",
            "\t\tfloat lastY = SCR_HEIGHT / 2.0f;",
            "\t\tbool firstMouse = true;",
            "\t\t",
            "\t\tfloat deltaTime = 0.0f;",
            "\t\tfloat lastFrame = 0.0f;",
            "\t\t",
            "\t\tint main(int argc, char * argv[]) {",
            "\t\t\tglfwInit(); // 初始化GLFW",
            "\t\t\t// 第一个参数代表选项的名称，我们可以从很多以GLFW_开头的枚举值中选择",
            "\t\t\t// 第二个参数接受一个整型，用来设置这个选项的值。",
            "\t\t\tglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);",
            "\t\t\tglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);",
            "\t\t\tglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);",
            "\t\t\t",
            "\t\t\t#ifdef __APPLE__",
            "\t\t\tglfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);",
            "\t\t\t#endif",
            "\t\t\t",
            "\t\t\t// 创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。",
            "\t\t\tGLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, \"${3:Test}\", NULL, NULL);",
            "\t\t\tif (!window) {",
            "\t\t\t\tstd::cout << \"Failed to create GLFW window\" << std::endl;",
            "\t\t\t\tglfwTerminate();",
            "\t\t\t\treturn -1;",
            "\t\t\t}",
            "\t\t\tglfwMakeContextCurrent(window);",
            "\t\t\tglfwSetFramebufferSizeCallback(window, framebuffer_size_callback);",
            "\t\t\tglfwSetCursorPosCallback(window, mouse_callback);",
            "\t\t\tglfwSetScrollCallback(window, scroll_callback);",
            "\t\t\t",
            "\t\t\tglfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);",
            "\t\t\t",
            "\t\t\t// GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。",
            "\t\t\tif (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {",
            "\t\t\t\tstd::cout << \"Failed to initialize GLAD\" << std::endl;",
            "\t\t\t\treturn -1;",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tglEnable(GL_DEPTH_TEST);",
            "\t\t\t",
            "\t\t\t// SetRC",
            "\t\t\t",
            "\t\t\t// 渲染循环",
            "\t\t\tdo {",
            "\t\t\t\tfloat currentFrame = glfwGetTime();",
            "\t\t\t\tdeltaTime = currentFrame - lastFrame;",
            "\t\t\t\tlastFrame = currentFrame;",
            "\t\t\t\t",
            "\t\t\t\tprocessInput(window);",
            "\t\t\t\t// 设置清空屏幕所用的颜色",
            "\t\t\t\tglClearColor(0.1f, 0.1f, 0.1f, 1.0f);",
            "\t\t\t\t// 清空缓冲区，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲",
            "\t\t\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);",
            "\t\t\t\t",
            "\t\t\t\t// Draw",
            "\t\t\t\t",
            "\t\t\t\t// 交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。",
            "\t\t\t\tglfwSwapBuffers(window);",
            "\t\t\t\t// 检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。",
            "\t\t\t\tglfwPollEvents();",
            "\t\t\t} while (!glfwWindowShouldClose(window));// 检查一次GLFW是否被要求退出，如果是的话该函数返回true",
            "\t\t\t",
            "\t\t\t// clean",
            "\t\t\t",
            "\t\t\t// 正确释放/删除之前的分配的所有资源",
            "\t\t\tglfwTerminate();",
            "\t\t\treturn 0;",
            "\t\t}",
            "\t\t",
            "\t\tvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)",
            "\t\t{",
            "\t\t\tglViewport(0, 0, width, height);",
            "\t\t}",
            "\t\t",
            "\t\tvoid processInput(GLFWwindow* window)",
            "\t\t{",
            "\t\t\tif (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)",
            "\t\t\t{",
            "\t\t\t\tglfwSetWindowShouldClose(window, true);",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tif (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)",
            "\t\t\t\tcamera.ProcessKeyboard(FORWARD, deltaTime);",
            "\t\t\tif (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)",
            "\t\t\t\tcamera.ProcessKeyboard(BACKWARD, deltaTime);",
            "\t\t\tif (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)",
            "\t\t\t\tcamera.ProcessKeyboard(LEFT, deltaTime);",
            "\t\t\tif (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)",
            "\t\t\t\tcamera.ProcessKeyboard(RIGHT, deltaTime);",
            "\t\t}",
            "\t\t",
            "\t\tvoid mouse_callback(GLFWwindow* window, double xpos, double ypos)",
            "\t\t{",
            "\t\t\tif (firstMouse)",
            "\t\t\t{",
            "\t\t\t\tlastX = xpos;",
            "\t\t\t\tlastY = ypos;",
            "\t\t\t\tfirstMouse = false;",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tfloat xoffset = xpos - lastX;",
            "\t\t\tfloat yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top",
            "\t\t\t",
            "\t\t\tlastX = xpos;",
            "\t\t\tlastY = ypos;",
            "\t\t\t",
            "\t\t\tcamera.ProcessMouseMovement(xoffset, yoffset);",
            "\t\t}",
            "\t\t",
            "\t\tvoid scroll_callback(GLFWwindow* window, double xoffset, double yoffset)",
            "\t\t{",
            "\t\t\tcamera.ProcessMouseScroll(yoffset);",
            "\t\t}",
            "\t\t",
            "\t\tunsigned int loadTexture(char const * path)",
            "\t\t{",
            "\t\t\tunsigned int textureID;",
            "\t\t\tglGenTextures(1, &textureID);",
            "\t\t\t",
            "\t\t\tint width, height, nrComponents;",
            "\t\t\tunsigned char *data = stbi_load(path, &width, &height, &nrComponents, 0);",
            "\t\t\tif (data)",
            "\t\t\t{",
            "\t\t\t\tGLenum format;",
            "\t\t\t\tif (nrComponents == 1)",
            "\t\t\t\t\tformat = GL_RED;",
            "\t\t\t\telse if (nrComponents == 3)",
            "\t\t\t\t\tformat = GL_RGB;",
            "\t\t\t\telse if (nrComponents == 4)",
            "\t\t\t\t\tformat = GL_RGBA;",
            "\t\t\t",
            "\t\t\t\tglBindTexture(GL_TEXTURE_2D, textureID);",
            "\t\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);",
            "\t\t\t\tglGenerateMipmap(GL_TEXTURE_2D);",
            "\t\t\t",
            "\t\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);",
            "\t\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);",
            "\t\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);",
            "\t\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);",
            "\t\t\t",
            "\t\t\t\tstbi_image_free(data);",
            "\t\t\t}",
            "\t\t\telse",
            "\t\t\t{",
            "\t\t\t\tstd::cout << \"Texture failed to load at path: \" << path << std::endl;",
            "\t\t\t\tstbi_image_free(data);",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\treturn textureID;",
            "\t\t}",
            "\t\t",
            "\t}",
            "}",
		],
		"description": "New OpenGL Window with GLFW"
	}
}